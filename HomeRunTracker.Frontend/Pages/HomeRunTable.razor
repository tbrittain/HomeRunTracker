@using HomeRunTracker.Frontend.Services.HttpService
@using HomeRunTracker.Common.Models.Internal
@using HomeRunTracker.Common.Models.Notifications
@using HomeRunTracker.Frontend.Services
@using System.Globalization
@inject IHttpService HttpService
@inject HomeRunHubService HomeRunHubService

<table>
    <thead>
    <tr>
        <th>Batter Name</th>
        <th>Distance</th>
        <th>Launch Angle</th>
        <th>Launch Speed</th>
        <th>Date</th>
        <th>RBI</th>
        <th>Description</th>
        <th>Video</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var record in _homeRuns)
    {
        <tr>
            <td>@record.BatterName</td>
            <td>@record.TotalDistance.ToString(CultureInfo.CurrentCulture)</td>
            <td>@record.LaunchAngle.ToString(CultureInfo.CurrentCulture)</td>
            <td>@record.LaunchSpeed.ToString(CultureInfo.CurrentCulture)</td>
            <td>@record.DateTime.ToString("T")</td>
            <td>@record.Rbi.ToString(CultureInfo.CurrentCulture)</td>
            <td>@record.Description</td>
            <td>
                @if (record.HighlightUrl is not null)
                {
                    <a href="@record.HighlightUrl" target="_blank">Link</a>
                }
                else
                {
                    <span>Not Available</span>
                }
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<HomeRunRecord> _homeRuns = new();
    private DateTime _dateTime;

    [Parameter]
    public DateTime DateTime
    {
        get => _dateTime;
        set => _dateTime = value;
    }

    protected override async Task OnInitializedAsync()
    {
        await HomeRunHubService.StartHubConnection();
        HomeRunHubService.SubscribeToHubMethods();
    }

    protected override async Task OnParametersSetAsync()
    {
        _homeRuns = (await HttpService.GetHomeRunsAsync(DateTime == DateTime.Today ? null : DateTime.Date))
            .OrderByDescending(hr => hr.TotalDistance)
            .ToList();
        
        if (DateTime.Date != DateTime.Today)
        {
            HomeRunHubService.OnHomeRunReceived -= OnHomeRunReceived;
            HomeRunHubService.OnHomeRunUpdated -= OnHomeRunUpdated;
        }
        else
        {
            HomeRunHubService.OnHomeRunReceived += OnHomeRunReceived;
            HomeRunHubService.OnHomeRunUpdated += OnHomeRunUpdated;
        }

        await base.OnParametersSetAsync();
    }

    private async Task OnHomeRunUpdated(HomeRunUpdatedNotification arg)
    {
        var homeRun = _homeRuns.Single(_ => _.Hash == arg.HomeRunHash);

        homeRun.HighlightUrl = arg.HighlightUrl;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnHomeRunReceived(HomeRunRecord homeRun)
    {
        _homeRuns = _homeRuns.Append(homeRun)
            .OrderByDescending(hr => hr.TotalDistance)
            .ToList();
        await InvokeAsync(StateHasChanged);
    }
}