@using HomeRunTracker.Frontend.Services.HttpService
@using HomeRunTracker.Common.Models.Internal
@using HomeRunTracker.Common.Models.Notifications
@using HomeRunTracker.Frontend.Services
@using System.Globalization
@inject IHttpService HttpService
@inject HomeRunHubService HomeRunHubService

@if (_isLoading)
{
    <div class="flex-row d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <QuickGrid Items="@_items" ResizableColumns="true" class="table bg-black text-light">
        <TemplateColumn>
            <img src="@context.BatterImageUrl" alt="@context.BatterName" width="30" style="border-radius: 15px"/>
        </TemplateColumn>
        <PropertyColumn Title="Name" Property="@(c => c.BatterName)" Sortable="true"/>
        <TemplateColumn Title="Team" Sortable="true" SortBy="_sort">
            <img src="@context.BatterTeamImageUrl" alt="@context.TeamName" width="30" style="border-radius: 100%"/>
        </TemplateColumn>
        <PropertyColumn Title="Total Distance" Property="@(c => c.TotalDistance)" Sortable="true" IsDefaultSort="SortDirection.Descending"/>
        <PropertyColumn Title="Launch Angle" Property="@(c => c.LaunchAngle)" Sortable="true"/>
        <PropertyColumn Title="Exit Velocity" Property="@(c => c.LaunchSpeed)" Sortable="true"/>
        <PropertyColumn Title="Time" Property="@(c => c.DateTime)" Format="T" Sortable="true"/>
        <PropertyColumn Title="RBI" Property="@(c => c.Rbi)" Sortable="true"/>
        <PropertyColumn Title="Description" Property="@(c => c.Description)" Sortable="false"/>
        <TemplateColumn>
            <td>
                @if (!string.IsNullOrEmpty(@context.HighlightUrl))
                {
                    <a href="@context.HighlightUrl" target="_blank">Link</a>
                }
                else
                {
                    <span>Not available</span>
                }
            </td>
        </TemplateColumn>
    </QuickGrid>
}

@code {
    private IQueryable<HomeRunRecord> _items = null!;
    private List<HomeRunRecord> _homeRuns = new();
    private bool _isLoading;

    GridSort<HomeRunRecord> _sort = GridSort<HomeRunRecord>.ByAscending(x => x.TeamName);

    [Parameter]
    public DateTime DateTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await HomeRunHubService.StartHubConnection();
        HomeRunHubService.SubscribeToHubMethods();
    }

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        await InvokeAsync(StateHasChanged);

        _homeRuns.Clear();
        _items = new List<HomeRunRecord>().AsQueryable();

        _homeRuns = await HttpService.GetHomeRunsAsync(DateTime == DateTime.Today ? null : DateTime.Date);
        _items = _homeRuns.AsQueryable();

        _isLoading = false;
        await InvokeAsync(StateHasChanged);

        if (DateTime.Date != DateTime.Today)
        {
            HomeRunHubService.OnHomeRunReceived -= OnHomeRunReceived;
            HomeRunHubService.OnHomeRunUpdated -= OnHomeRunUpdated;
        }
        else
        {
            HomeRunHubService.OnHomeRunReceived += OnHomeRunReceived;
            HomeRunHubService.OnHomeRunUpdated += OnHomeRunUpdated;
        }

        await base.OnParametersSetAsync();
    }

    private async Task OnHomeRunUpdated(HomeRunUpdatedNotification arg)
    {
        var homeRun = _homeRuns.Single(_ => _.Hash == arg.HomeRunHash);
        homeRun.HighlightUrl = arg.HighlightUrl;

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnHomeRunReceived(HomeRunRecord homeRun)
    {
        _homeRuns = _homeRuns.Append(homeRun).ToList();
        _items = _homeRuns.AsQueryable();

        await InvokeAsync(StateHasChanged);
    }

}