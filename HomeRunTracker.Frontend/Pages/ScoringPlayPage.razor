@using HomeRunTracker.Frontend.Services.HttpService
@using HomeRunTracker.Frontend.Services
@inject IHttpService HttpService
@inject ScoringPlayHubService ScoringPlayHubService
@inject TimezoneService TimezoneService
@implements IDisposable
@layout DateHeader
@page "/"
@page "/scoring-plays"

<div>
    @if (_isLoading)
    {
        <LoadingSpinner />
    }

    <div>
        <input type="radio"
               id="home_runs"
               name="home_runs_toggle"
               value="hr"
               checked="@OnlyShowHomeRuns"
               @onchange="(() => OnlyShowHomeRuns = true)">
        <label for="home_runs">Only home runs</label><br>
        <input type="radio"
               id="all"
               name="all_scoring_plays_toggle"
               value="all"
               checked="@(!OnlyShowHomeRuns)"
               @onchange="(() => OnlyShowHomeRuns = false)">
        <label for="all">All scoring plays</label><br>
    </div>

    <QuickGrid Items="@_items" ResizableColumns="true" class="table bg-black text-light">
        <TemplateColumn>
            <img src="@context.BatterImageUrl" alt="@context.BatterName" width="30" style="border-radius: 15px"/>
        </TemplateColumn>
        <PropertyColumn Title="Name" Property="@(c => c.BatterName)" Sortable="true"/>
        <TemplateColumn Title="Team" Sortable="true" SortBy="_teamSort">
            <img src="@context.BatterTeamImageUrl" alt="@context.TeamName" width="30" style="border-radius: 100%"/>
        </TemplateColumn>
        @if (!OnlyShowHomeRuns)
        {
            <TemplateColumn Title="Result" Sortable="true" SortBy="_playResultSort">
                <p>@context.Result.ToString()</p>
            </TemplateColumn>
        }
        <TemplateColumn
            Title="Distance"
            Sortable="true"
            SortBy="@_distanceSort"
            IsDefaultSort="SortDirection.Descending">
            <div
                style="text-align: center;"
                class="fw-bold">
                <p style="color: @context.DistanceColor">@context.FormattedDistance</p>
            </div>
        </TemplateColumn>
        <TemplateColumn
            Title="LA"
            Sortable="true"
            SortBy="@_launchAngleSort">
            <div
                style="text-align: center;"
                class="fw-bold">
                <p style="color: @context.LaunchAngleColor">@context.FormattedLaunchAngle</p>
            </div>
        </TemplateColumn>
        <TemplateColumn
            Title="Exit Velocity"
            Sortable="true"
            SortBy="@_exitVelocitySort">
            <div
                style="text-align: center;"
                class="fw-bold">
                <p style="color: @context.LaunchSpeedColor">@context.FormattedLaunchSpeed</p>
            </div>
        </TemplateColumn>
        <TemplateColumn
            Title="Leverage Index"
            Sortable="true"
            SortBy="@_leverageIndexSort">
            <div
                style="text-align: center;"
                class="fw-bold">
                <p style="color: @context.LeverageIndexColor">@context.FormattedLeverageIndex</p>
            </div>
        </TemplateColumn>
        <TemplateColumn Title="Time" Sortable="true" SortBy="@_dateTimeOffsetSort">
            <p>@context.FormattedDateTimeOffset(_localOffset)</p>
        </TemplateColumn>
        <PropertyColumn Title="RBI" Property="@(c => c.Rbi)" Sortable="true"/>
        <PropertyColumn Title="Description" Property="@(c => c.Description)" Sortable="false"/>
        <TemplateColumn>
            <td>
                @if (!string.IsNullOrEmpty(@context.HighlightUrl))
                {
                    <button @onclick="(() => OnVideoButtonClicked(context))">
                        <i class="fas fa-play"></i>
                    </button>
                }
            </td>
        </TemplateColumn>
    </QuickGrid>
</div>